{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","title","userName","completed","react_default","a","createElement","className","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","loaded","loadItems","bind","assertThisInitialized","sortItems","url","fetch","then","res","json","_this2","Promise","all","loadApi","_ref","_ref2","slicedToArray","todos","users","setState","map","item","objectSpread","user","find","userId","id","sort","b","localeCompare","type","onClick","components_TodoItem","key","name","React","Component","App","src_components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAeeA,MAZf,SAAkBC,GAAO,IACjBC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,UAEvB,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,GAAYA,KCgElBK,cAtEb,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMZ,KACDgB,MAAQ,CACXC,KAAM,GACNC,QAAQ,GAEVT,EAAKU,UAAYV,EAAKU,UAAUC,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IACjBA,EAAKa,UAAYb,EAAKa,UAAUF,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IAPAA,uEAUXc,GACN,OAAOC,MAAMD,GACVE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAR,GAAI,OAAIA,wCAGN,IAAAW,EAAAhB,KACViB,QAAQC,IAAI,CACVlB,KAAKmB,QAAQ,8CACbnB,KAAKmB,QAAQ,gDAEZN,KAAK,SAAAO,GAAA,IAAAC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAsB,EAAA,GAAEG,EAAFF,EAAA,GAASG,EAATH,EAAA,UAAoBL,EAAKS,SAAS,CACtCpB,KAAMkB,EAAMG,IAAI,SAAAC,GAAI,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAA,GACf6B,EADe,CAElBE,KAAML,EAAMM,KAAK,SAAAD,GAAI,OAAIF,EAAKI,SAAWF,EAAKG,KAC9CzC,UAAWoC,EAAKpC,UAAY,YAAc,iBAE5Ce,QAAQ,0CAKZN,KAAKyB,SAAS,SAACrB,GAAD,MAAY,CACxBC,KAAMD,EAAMC,KAAK4B,KAAK,SAACxC,EAAGyC,GAAJ,OAAUzC,EAAEJ,MAAM8C,cAAcD,EAAE7C,6CAK1D,OAAIW,KAAKI,MAAME,OAENN,KAAKI,MAAME,OAEhBd,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ0C,KAAK,SAASC,QAASrC,KAAKU,WAApC,SACJlB,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,aACCM,KAAKI,MAAMC,KAAKqB,IAAI,SAACC,GAAD,OACnBnC,EAAAC,EAAAC,cAAC4C,EAAD,CACEC,IAAKZ,EAAKtC,MACVA,MAAOsC,EAAKtC,MACZE,UAAWoC,EAAKpC,UAChBD,SAAUqC,EAAKE,KAAKW,iBAlB1B,EADGhD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWyC,KAAK,SAASC,QAASrC,KAAKO,WAAzD,oBAxCUkC,IAAMC,WCUdC,MARf,WACE,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkD,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.909e7b64.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction TodoItem(props) {\n const {title, userName, completed} = props;\n\n  return (\n    <tr>\n      <td>{title}</td>\n      <td>{userName}</td>\n      <td className={completed}>{completed}</td>\n    </tr>\n  );\n}\n\nexport default TodoItem;\n\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  userName: PropTypes.string.isRequired,\n  completed: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loaded: false\n    };\n    this.loadItems = this.loadItems.bind(this);\n    this.sortItems = this.sortItems.bind(this);\n  }\n\n  loadApi(url) {\n    return fetch(url)\n      .then(res => res.json())\n      .then(data => data);\n  }\n\n  loadItems() {\n    Promise.all([\n      this.loadApi('https://jsonplaceholder.typicode.com/todos'),\n      this.loadApi('https://jsonplaceholder.typicode.com/users'),\n    ])\n      .then(([todos, users]) => this.setState({\n        data: todos.map(item => ({\n          ...item,\n          user: users.find(user => item.userId === user.id),\n          completed: item.completed ? 'Completed' : 'In-process'\n        })),\n        loaded: true\n      }))\n  }\n\n  sortItems() {\n    this.setState((state) => ({\n      data: state.data.sort((a, b) => a.title.localeCompare(b.title))\n    }))\n  }\n\n  render() {\n    if(!this.state.loaded) {\n      return <button className='load-btn' type='submit' onClick={this.loadItems}>Load page</button>\n    }else if(this.state.loaded){\n      return (\n        <div>\n\n          <table>\n            <thead>\n              <tr>\n                <th><button type='submit' onClick={this.sortItems}>TODO</button></th>\n                <th>Name</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n            {this.state.data.map((item) => (\n              <TodoItem\n                key={item.title}\n                title={item.title}\n                completed={item.completed}\n                userName={item.user.name}\n              />\n            ))}\n            </tbody>\n          </table>\n        </div>\n      )\n    }\n\n  }\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport './components/TodoList.css';\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}